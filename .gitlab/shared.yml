#
# Кеширирование сборки rust проектов
#  - директория runners-cache монтируется с node и может использоваться как быстрый кеш для сборок
#
.rust-cache-x86_64-unknown-linux-gnu:
  before_script:
    - mkdir -p /runners-cache/rust/x86_64-unknown-linux-gnu/target/
    - mkdir -p /runners-cache/rust/x86_64-unknown-linux-gnu/cargo/
    - export CARGO_TARGET_DIR=/runners-cache/rust/x86_64-unknown-linux-gnu/target/
    - export CARGO_HOME=/runners-cache/rust/x86_64-unknown-linux-gnu/cargo/

.rust-cache-x86_64-unknown-linux-musl:
  before_script:
    - mkdir -p /runners-cache/rust/x86_64-unknown-linux-musl/target/
    - mkdir -p /runners-cache/rust/x86_64-unknown-linux-musl/cargo/
    - export CARGO_TARGET_DIR=/runners-cache/rust/x86_64-unknown-linux-musl/target/
    - export CARGO_HOME=/runners-cache/rust/x86_64-unknown-linux-musl/cargo/

.rust-cache-armv7-linux-androideabi:
  before_script:
    - mkdir -p /runners-cache/rust/armv7-linux-androideabi/target/
    - mkdir -p /runners-cache/rust/armv7-linux-androideabi/cargo/
    - export CARGO_TARGET_DIR=/runners-cache/rust/armv7-linux-androideabi/target/
    - export CARGO_HOME=/runners-cache/rust/armv7-linux-androideabi/cargo/

.rust-cache-aarch64-linux-android:
  before_script:
    - mkdir -p /runners-cache/rust/aarch64-linux-android/target/
    - mkdir -p /runners-cache/rust/aarch64-linux-android/cargo/
    - export CARGO_TARGET_DIR=/runners-cache/rust/aarch64-linux-android/target/
    - export CARGO_HOME=/runners-cache/rust/aarch64-linux-android/cargo/


#
# Бранчи для которых включены интеграционные тесты
#
.integration-branches:
  only:
    refs:
      - kviring
      - flaamjab

#
# Использование docker-in-docker
#
.docker-dind-tls:
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

.docker-dind-no-tls:
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""


.build-and-deploy-server-images:
  image: registry.dev.cheetah.games/cheetah/images/rust-builder-x86_64-unknown-linux-musl:1.0.4
  script:
    - cd server
    - RUSTFLAGS="-Ctarget-cpu=haswell -Ctarget-feature=+avx2" cargo build --release --target x86_64-unknown-linux-musl
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD registry.dev.cheetah.games/cheetah/
    - ln -s $CARGO_TARGET_DIR target
    - ./package-server-images.sh
