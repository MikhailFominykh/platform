variables:
  namespace: $CI_COMMIT_REF_SLUG
  version: $CI_COMMIT_SHA
  UNITY_DIR: $CI_PROJECT_DIR/clients/Unity/

#
# Сборка docker image для сервисов сервера
#
build-server-images-for-integration-test:
  only:
    refs:
      - kviring
  image: registry.dev.cheetah.games/cheetah/images/rust-builder-x86_64-unknown-linux-musl:1.0.0
  stage: test
  script:
    - cd server
    - cargo fetcher --url file:///`pwd`/../.cache/crates/ --include-index sync
    - RUSTFLAGS="-Ctarget-cpu=haswell -Ctarget-feature=+avx2" cargo build --offline --release --target x86_64-unknown-linux-musl
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD registry.dev.cheetah.games/cheetah/
    - ./package-server-images.sh


#
# Собираем  relay.so для Unity под Linux
#
build-relay-client-for-integration-test:
  only:
    refs:
      - kviring
  image: registry.dev.cheetah.games/cheetah/images/rust-builder-x86_64-unknown-linux-gnu:1.0.2
  stage: test
  script:
    - source $HOME/.cargo/env
    - cd server
    - cargo fetcher --url file:///`pwd`/../.cache/crates/ --include-index sync
    - cargo build --manifest-path matches/Relay/Client/Cargo.toml --offline --release
  artifacts:
    paths:
      - server/target/release/libcheetah_matches_relay_client.so
    expire_in: 1 day


#
# Развертываем сервер в kubernetes кластере
#
install-servers-to-kubernetes-for-integration-test:
  only:
    refs:
      - kviring
  needs:
    - build-server-images-for-integration-test
  image: registry.dev.cheetah.games/cheetah/images/helm-builder:1.0.2
  stage: test
  script:
    - helm --kubeconfig=$kubeconfig uninstall ${namespace} -n ${namespace} || true
    - kubectl --kubeconfig=$kubeconfig  delete --namespace ${namespace} --all deployments,statefulsets,services,pods,pvc
    - sleep 20
    - cd hosting/charts/
    - tar -czf rooms-configuration.tgz -C ../../server/matches/Factory/example/ .
    - helm --kubeconfig=$kubeconfig  upgrade --debug --install ${namespace} -n ${namespace} Platform -f Platform/values-dev.yaml --set global.grpcDomain=${namespace}.stage.cheetah.games --set global.platformImageVersion=${version} --set global.roomsConfiguration=`cat rooms-configuration.tgz | openssl enc -A -base64`
    - sleep 60

#
# Запускаем тесты в Unity с сервером в kubernetes
#
test-integration-run-unity-with-kubernetes:
  only:
    refs:
      - kviring
  needs:
    - install-servers-to-kubernetes-for-integration-test
    - build-relay-client-for-integration-test
  image: unityci/editor:2021.2.7f1-base-1.0.0
  cache:
    key: "unity-integration-test"
    paths:
      - $UNITY_DIR/Library/
  variables:
    TEST_PLATFORM: playmode
    TESTING_TYPE: JUNIT
  before_script:
    - mkdir -p /root/.cache/unity3d
    - mkdir -p /root/.local/share/unity3d/Unity/
  script:
    - apt-get update && apt-get install -y default-jre libsaxonb-java
    - echo "${UNITY_LICENSE}" | tr -d '\r' > /root/.local/share/unity3d/Unity/Unity_lic.ulf
    - echo "{\"ServerHost\":\"${namespace}.stage.cheetah.games\"}" >  $UNITY_DIR/integration-test-config.json
    - chmod +x .gitlab/scripts/unity-test.sh
    - cp server/target/release/libcheetah_matches_relay_client.so clients/Unity/Packages/games.cheetah.matches.relay/x86_64/libcheetah_matches_relay_client.so
    - TEST_PLATFORM=editmode .gitlab/scripts/unity-test.sh
    - TEST_PLATFORM=playmode .gitlab/scripts/unity-test.sh
  artifacts:
    when: always
    reports:
      junit:
        - $UNITY_DIR/editmode-junit-results.xml
        - $UNITY_DIR/playmode-junit-results.xml


#
# Запускаем тесты в Unity с сервером в kubernetes
#
test-integration-run-unity-with-local-docker:
  only:
    refs:
      - kviring
  needs:
    - build-server-images-for-integration-test
    - build-relay-client-for-integration-test
  image: registry.dev.cheetah.games/cheetah/images/unity-builder:1.0.0
  cache:
    key: "unity-integration-test"
    paths:
      - $UNITY_DIR/Library/
  variables:
    TEST_PLATFORM: playmode
    TESTING_TYPE: JUNIT
  before_script:
    - mkdir -p /root/.cache/unity3d
    - mkdir -p /root/.local/share/unity3d/Unity/
  script:
    - export CONTAINER_ID=$(docker ps -q -f "label=com.gitlab.gitlab-runner.job.id=$CI_JOB_ID" -f "label=com.gitlab.gitlab-runner.type=build")
    - export DOCKER_MOUNT=$(docker inspect $CONTAINER_ID -f "{{range.Mounts }}{{ if eq .Destination \"/builds\" }}{{.Source }}{{end}}{{end}}" | cut -d "/" -f 6)
    - export DOCKER_MOUNT=/var/lib/docker/volumes/$DOCKER_MOUNT/_data/
    - echo "${UNITY_LICENSE}" | tr -d '\r' > /root/.local/share/unity3d/Unity/Unity_lic.ulf
    - echo "{\"ServerImageVersion\":\"${version}\",\"DockerMountDir\":\"$DOCKER_MOUNT\"}" >  $UNITY_DIR/integration-test-config.json
    - echo "{\"Login\":\"$CI_DEPLOY_USER\",\"Password\":\"$CI_DEPLOY_PASSWORD\"}" > $UNITY_DIR/cheetah-docker-registry.json
    - chmod +x .gitlab/scripts/unity-test.sh
    - cp server/target/release/libcheetah_matches_relay_client.so clients/Unity/Packages/games.cheetah.matches.relay/x86_64/libcheetah_matches_relay_client.so
    - TEST_PLATFORM=editmode .gitlab/scripts/unity-test.sh
    - TEST_PLATFORM=playmode .gitlab/scripts/unity-test.sh
  artifacts:
    when: always
    reports:
      junit:
        - $UNITY_DIR/editmode-junit-results.xml
        - $UNITY_DIR/playmode-junit-results.xml



remove-kubernetes-release:
  only:
    refs:
      - kviring
  image: registry.dev.cheetah.games/cheetah/images/helm-builder:1.0.2
  stage: cleanup
  variables:
    namespace: $CI_COMMIT_REF_SLUG
    version: $CI_COMMIT_SHA
  script:
    - helm --kubeconfig=$kubeconfig  uninstall ${namespace} -n ${namespace}
    - kubectl --kubeconfig=$kubeconfig  delete --namespace ${namespace} --all deployments,statefulsets,services,pods,pvc
