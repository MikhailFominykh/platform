// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: internal.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cheetah.Auth.Cerberus.Internal {

  /// <summary>Holder for reflection information generated from internal.proto</summary>
  public static partial class InternalReflection {

    #region Descriptor
    /// <summary>File descriptor for internal.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InternalReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5pbnRlcm5hbC5wcm90bxIeY2hlZXRhaC5hdXRoLmNlcmJlcnVzLmludGVy",
            "bmFsGgt0eXBlcy5wcm90byI3ChJDcmVhdGVUb2tlblJlcXVlc3QSDgoGcGxh",
            "eWVyGAEgASgEEhEKCWRldmljZV9pZBgCIAEoCTJtCghDZXJiZXJ1cxJhCgZj",
            "cmVhdGUSMi5jaGVldGFoLmF1dGguY2VyYmVydXMuaW50ZXJuYWwuQ3JlYXRl",
            "VG9rZW5SZXF1ZXN0GiMuY2hlZXRhaC5hdXRoLmNlcmJlcnVzLnR5cGVzLlRv",
            "a2Vuc1AAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Cheetah.Auth.Cerberus.Types.TypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Auth.Cerberus.Internal.CreateTokenRequest), global::Cheetah.Auth.Cerberus.Internal.CreateTokenRequest.Parser, new[]{ "Player", "DeviceId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CreateTokenRequest : pb::IMessage<CreateTokenRequest> {
    private static readonly pb::MessageParser<CreateTokenRequest> _parser = new pb::MessageParser<CreateTokenRequest>(() => new CreateTokenRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Auth.Cerberus.Internal.InternalReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTokenRequest(CreateTokenRequest other) : this() {
      player_ = other.player_;
      deviceId_ = other.deviceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTokenRequest Clone() {
      return new CreateTokenRequest(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private ulong player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 2;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (DeviceId != other.DeviceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0UL) hash ^= Player.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Player);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Player);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0UL) {
        Player = other.Player;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadUInt64();
            break;
          }
          case 18: {
            DeviceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
