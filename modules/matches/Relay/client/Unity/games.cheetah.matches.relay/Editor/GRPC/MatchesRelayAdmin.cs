// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: matches.relay.admin.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cheetah.Matches.Relay.Editor.GRPC {

  /// <summary>Holder for reflection information generated from matches.relay.admin.proto</summary>
  public static partial class MatchesRelayAdminReflection {

    #region Descriptor
    /// <summary>File descriptor for matches.relay.admin.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MatchesRelayAdminReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChltYXRjaGVzLnJlbGF5LmFkbWluLnByb3RvEhtjaGVldGFoLm1hdGNoZXMu",
            "cmVsYXkuYWRtaW4aGm1hdGNoZXMucmVsYXkuc2hhcmVkLnByb3RvIhEKD0dl",
            "dFJvb21zUmVxdWVzdCIhChBHZXRSb29tc1Jlc3BvbnNlEg0KBXJvb21zGAEg",
            "AygEIhsKC0R1bXBSZXF1ZXN0EgwKBHJvb20YASABKAQifgoMRHVtcFJlc3Bv",
            "bnNlEjQKBXVzZXJzGAEgAygLMiUuY2hlZXRhaC5tYXRjaGVzLnJlbGF5LmFk",
            "bWluLkR1bXBVc2VyEjgKB29iamVjdHMYAiADKAsyJy5jaGVldGFoLm1hdGNo",
            "ZXMucmVsYXkuYWRtaW4uRHVtcE9iamVjdCKNAQoIRHVtcFVzZXISCgoCaWQY",
            "ASABKA0SDgoGZ3JvdXBzGAIgASgEEhAKCGF0dGFjaGVkGAMgASgIElMKGGNv",
            "bXBhcmVfYW5kX3NldF9jbGVhbmVycxgEIAMoCzIxLmNoZWV0YWgubWF0Y2hl",
            "cy5yZWxheS5hZG1pbi5Db21wYXJlQW5kU2V0Q2xlYW5lciKZAQoUQ29tcGFy",
            "ZUFuZFNldENsZWFuZXISFgoOZ2FtZV9vYmplY3RfaWQYASABKA0SHgoWZ2Ft",
            "ZV9vYmplY3Rfb3duZXJfdXNlchgCIAEoDRIQCghmaWVsZF9pZBgDIAEoDRI3",
            "CgV2YWx1ZRgEIAEoCzIoLmNoZWV0YWgubWF0Y2hlcy5yZWxheS5zaGFyZWQu",
            "RmllbGRWYWx1ZSLWAgoKRHVtcE9iamVjdBIKCgJpZBgBIAEoDRIOCgZncm91",
            "cHMYAiABKAQSEAoIdGVtcGxhdGUYAyABKA0SDwoHY3JlYXRlZBgEIAEoCBIa",
            "Cg1vd25lcl91c2VyX2lkGAUgASgNSACIAQESPQoGZmllbGRzGAYgAygLMi0u",
            "Y2hlZXRhaC5tYXRjaGVzLnJlbGF5LnNoYXJlZC5HYW1lT2JqZWN0RmllbGQS",
            "YAoWY29tcGFyZV9hbmRfc2V0X293bmVycxgJIAMoCzJALmNoZWV0YWgubWF0",
            "Y2hlcy5yZWxheS5hZG1pbi5EdW1wT2JqZWN0LkNvbXBhcmVBbmRTZXRPd25l",
            "cnNFbnRyeRo6ChhDb21wYXJlQW5kU2V0T3duZXJzRW50cnkSCwoDa2V5GAEg",
            "ASgNEg0KBXZhbHVlGAIgASgDOgI4AUIQCg5fb3duZXJfdXNlcl9pZCIkChRD",
            "cmVhdGVTZXNzaW9uUmVxdWVzdBIMCgRyb29tGAEgASgEIiMKFUNyZWF0ZVNl",
            "c3Npb25SZXNwb25zZRIKCgJpZBgBIAEoDSJBChBTZXRGaWx0ZXJSZXF1ZXN0",
            "EgwKBHJvb20YASABKAQSDwoHc2Vzc2lvbhgCIAEoDRIOCgZmaWx0ZXIYAyAB",
            "KAkiEwoRU2V0RmlsdGVyUmVzcG9uc2UiMwoSR2V0Q29tbWFuZHNSZXF1ZXN0",
            "EgwKBHJvb20YASABKAQSDwoHc2Vzc2lvbhgCIAEoDSJNChNHZXRDb21tYW5k",
            "c1Jlc3BvbnNlEjYKCGNvbW1hbmRzGAEgAygLMiQuY2hlZXRhaC5tYXRjaGVz",
            "LnJlbGF5LmFkbWluLkNvbW1hbmQihwIKB0NvbW1hbmQSDAoEdGltZRgBIAEo",
            "ARIRCglkaXJlY3Rpb24YAiABKAkSDwoHY29tbWFuZBgDIAEoCRIRCglvYmpl",
            "Y3RfaWQYBCABKAkSDwoHdXNlcl9pZBgFIAEoDRIVCgh0ZW1wbGF0ZRgGIAEo",
            "DUgAiAEBEhUKCGZpZWxkX2lkGAcgASgNSAGIAQESQAoKZmllbGRfdHlwZRgI",
            "IAEoDjInLmNoZWV0YWgubWF0Y2hlcy5yZWxheS5zaGFyZWQuRmllbGRUeXBl",
            "SAKIAQESDQoFdmFsdWUYCSABKAlCCwoJX3RlbXBsYXRlQgsKCV9maWVsZF9p",
            "ZEINCgtfZmllbGRfdHlwZSI0ChNDbG9zZVNlc3Npb25SZXF1ZXN0EgwKBHJv",
            "b20YASABKAQSDwoHc2Vzc2lvbhgCIAEoDSIWChRDbG9zZVNlc3Npb25SZXNw",
            "b25zZTJwCgVSZWxheRJnCghHZXRSb29tcxIsLmNoZWV0YWgubWF0Y2hlcy5y",
            "ZWxheS5hZG1pbi5HZXRSb29tc1JlcXVlc3QaLS5jaGVldGFoLm1hdGNoZXMu",
            "cmVsYXkuYWRtaW4uR2V0Um9vbXNSZXNwb25zZTJjCgREdW1wElsKBER1bXAS",
            "KC5jaGVldGFoLm1hdGNoZXMucmVsYXkuYWRtaW4uRHVtcFJlcXVlc3QaKS5j",
            "aGVldGFoLm1hdGNoZXMucmVsYXkuYWRtaW4uRHVtcFJlc3BvbnNlMtoDCg1D",
            "b21tYW5kVHJhY2VyEnYKDUNyZWF0ZVNlc3Npb24SMS5jaGVldGFoLm1hdGNo",
            "ZXMucmVsYXkuYWRtaW4uQ3JlYXRlU2Vzc2lvblJlcXVlc3QaMi5jaGVldGFo",
            "Lm1hdGNoZXMucmVsYXkuYWRtaW4uQ3JlYXRlU2Vzc2lvblJlc3BvbnNlEmoK",
            "CVNldEZpbHRlchItLmNoZWV0YWgubWF0Y2hlcy5yZWxheS5hZG1pbi5TZXRG",
            "aWx0ZXJSZXF1ZXN0Gi4uY2hlZXRhaC5tYXRjaGVzLnJlbGF5LmFkbWluLlNl",
            "dEZpbHRlclJlc3BvbnNlEnAKC0dldENvbW1hbmRzEi8uY2hlZXRhaC5tYXRj",
            "aGVzLnJlbGF5LmFkbWluLkdldENvbW1hbmRzUmVxdWVzdBowLmNoZWV0YWgu",
            "bWF0Y2hlcy5yZWxheS5hZG1pbi5HZXRDb21tYW5kc1Jlc3BvbnNlEnMKDENs",
            "b3NlU2Vzc2lvbhIwLmNoZWV0YWgubWF0Y2hlcy5yZWxheS5hZG1pbi5DbG9z",
            "ZVNlc3Npb25SZXF1ZXN0GjEuY2hlZXRhaC5tYXRjaGVzLnJlbGF5LmFkbWlu",
            "LkNsb3NlU2Vzc2lvblJlc3BvbnNlQiSqAiFDaGVldGFoLk1hdGNoZXMuUmVs",
            "YXkuRWRpdG9yLkdSUENQAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Cheetah.Matches.Relay.Shared.GRPC.MatchesRelaySharedReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Relay.Editor.GRPC.GetRoomsRequest), global::Cheetah.Matches.Relay.Editor.GRPC.GetRoomsRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Relay.Editor.GRPC.GetRoomsResponse), global::Cheetah.Matches.Relay.Editor.GRPC.GetRoomsResponse.Parser, new[]{ "Rooms" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Relay.Editor.GRPC.DumpRequest), global::Cheetah.Matches.Relay.Editor.GRPC.DumpRequest.Parser, new[]{ "Room" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Relay.Editor.GRPC.DumpResponse), global::Cheetah.Matches.Relay.Editor.GRPC.DumpResponse.Parser, new[]{ "Users", "Objects" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Relay.Editor.GRPC.DumpUser), global::Cheetah.Matches.Relay.Editor.GRPC.DumpUser.Parser, new[]{ "Id", "Groups", "Attached", "CompareAndSetCleaners" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Relay.Editor.GRPC.CompareAndSetCleaner), global::Cheetah.Matches.Relay.Editor.GRPC.CompareAndSetCleaner.Parser, new[]{ "GameObjectId", "GameObjectOwnerUser", "FieldId", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Relay.Editor.GRPC.DumpObject), global::Cheetah.Matches.Relay.Editor.GRPC.DumpObject.Parser, new[]{ "Id", "Groups", "Template", "Created", "OwnerUserId", "Fields", "CompareAndSetOwners" }, new[]{ "OwnerUserId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Relay.Editor.GRPC.CreateSessionRequest), global::Cheetah.Matches.Relay.Editor.GRPC.CreateSessionRequest.Parser, new[]{ "Room" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Relay.Editor.GRPC.CreateSessionResponse), global::Cheetah.Matches.Relay.Editor.GRPC.CreateSessionResponse.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Relay.Editor.GRPC.SetFilterRequest), global::Cheetah.Matches.Relay.Editor.GRPC.SetFilterRequest.Parser, new[]{ "Room", "Session", "Filter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Relay.Editor.GRPC.SetFilterResponse), global::Cheetah.Matches.Relay.Editor.GRPC.SetFilterResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Relay.Editor.GRPC.GetCommandsRequest), global::Cheetah.Matches.Relay.Editor.GRPC.GetCommandsRequest.Parser, new[]{ "Room", "Session" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Relay.Editor.GRPC.GetCommandsResponse), global::Cheetah.Matches.Relay.Editor.GRPC.GetCommandsResponse.Parser, new[]{ "Commands" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Relay.Editor.GRPC.Command), global::Cheetah.Matches.Relay.Editor.GRPC.Command.Parser, new[]{ "Time", "Direction", "Command_", "ObjectId", "UserId", "Template", "FieldId", "FieldType", "Value" }, new[]{ "Template", "FieldId", "FieldType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Relay.Editor.GRPC.CloseSessionRequest), global::Cheetah.Matches.Relay.Editor.GRPC.CloseSessionRequest.Parser, new[]{ "Room", "Session" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Relay.Editor.GRPC.CloseSessionResponse), global::Cheetah.Matches.Relay.Editor.GRPC.CloseSessionResponse.Parser, null, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetRoomsRequest : pb::IMessage<GetRoomsRequest> {
    private static readonly pb::MessageParser<GetRoomsRequest> _parser = new pb::MessageParser<GetRoomsRequest>(() => new GetRoomsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Relay.Editor.GRPC.MatchesRelayAdminReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomsRequest(GetRoomsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomsRequest Clone() {
      return new GetRoomsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetRoomsResponse : pb::IMessage<GetRoomsResponse> {
    private static readonly pb::MessageParser<GetRoomsResponse> _parser = new pb::MessageParser<GetRoomsResponse>(() => new GetRoomsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Relay.Editor.GRPC.MatchesRelayAdminReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomsResponse(GetRoomsResponse other) : this() {
      rooms_ = other.rooms_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomsResponse Clone() {
      return new GetRoomsResponse(this);
    }

    /// <summary>Field number for the "rooms" field.</summary>
    public const int RoomsFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_rooms_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> rooms_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Rooms {
      get { return rooms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rooms_.Equals(other.rooms_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rooms_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rooms_.WriteTo(output, _repeated_rooms_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rooms_.CalculateSize(_repeated_rooms_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomsResponse other) {
      if (other == null) {
        return;
      }
      rooms_.Add(other.rooms_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            rooms_.AddEntriesFrom(input, _repeated_rooms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DumpRequest : pb::IMessage<DumpRequest> {
    private static readonly pb::MessageParser<DumpRequest> _parser = new pb::MessageParser<DumpRequest>(() => new DumpRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DumpRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Relay.Editor.GRPC.MatchesRelayAdminReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpRequest(DumpRequest other) : this() {
      room_ = other.room_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpRequest Clone() {
      return new DumpRequest(this);
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 1;
    private ulong room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DumpRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DumpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Room != other.Room) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Room != 0UL) hash ^= Room.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Room != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Room);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Room != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Room);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DumpRequest other) {
      if (other == null) {
        return;
      }
      if (other.Room != 0UL) {
        Room = other.Room;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Room = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DumpResponse : pb::IMessage<DumpResponse> {
    private static readonly pb::MessageParser<DumpResponse> _parser = new pb::MessageParser<DumpResponse>(() => new DumpResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DumpResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Relay.Editor.GRPC.MatchesRelayAdminReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpResponse(DumpResponse other) : this() {
      users_ = other.users_.Clone();
      objects_ = other.objects_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpResponse Clone() {
      return new DumpResponse(this);
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cheetah.Matches.Relay.Editor.GRPC.DumpUser> _repeated_users_codec
        = pb::FieldCodec.ForMessage(10, global::Cheetah.Matches.Relay.Editor.GRPC.DumpUser.Parser);
    private readonly pbc::RepeatedField<global::Cheetah.Matches.Relay.Editor.GRPC.DumpUser> users_ = new pbc::RepeatedField<global::Cheetah.Matches.Relay.Editor.GRPC.DumpUser>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cheetah.Matches.Relay.Editor.GRPC.DumpUser> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "objects" field.</summary>
    public const int ObjectsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cheetah.Matches.Relay.Editor.GRPC.DumpObject> _repeated_objects_codec
        = pb::FieldCodec.ForMessage(18, global::Cheetah.Matches.Relay.Editor.GRPC.DumpObject.Parser);
    private readonly pbc::RepeatedField<global::Cheetah.Matches.Relay.Editor.GRPC.DumpObject> objects_ = new pbc::RepeatedField<global::Cheetah.Matches.Relay.Editor.GRPC.DumpObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cheetah.Matches.Relay.Editor.GRPC.DumpObject> Objects {
      get { return objects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DumpResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DumpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!users_.Equals(other.users_)) return false;
      if(!objects_.Equals(other.objects_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= users_.GetHashCode();
      hash ^= objects_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      users_.WriteTo(output, _repeated_users_codec);
      objects_.WriteTo(output, _repeated_objects_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += users_.CalculateSize(_repeated_users_codec);
      size += objects_.CalculateSize(_repeated_objects_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DumpResponse other) {
      if (other == null) {
        return;
      }
      users_.Add(other.users_);
      objects_.Add(other.objects_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 18: {
            objects_.AddEntriesFrom(input, _repeated_objects_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DumpUser : pb::IMessage<DumpUser> {
    private static readonly pb::MessageParser<DumpUser> _parser = new pb::MessageParser<DumpUser>(() => new DumpUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DumpUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Relay.Editor.GRPC.MatchesRelayAdminReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpUser(DumpUser other) : this() {
      id_ = other.id_;
      groups_ = other.groups_;
      attached_ = other.attached_;
      compareAndSetCleaners_ = other.compareAndSetCleaners_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpUser Clone() {
      return new DumpUser(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 2;
    private ulong groups_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Groups {
      get { return groups_; }
      set {
        groups_ = value;
      }
    }

    /// <summary>Field number for the "attached" field.</summary>
    public const int AttachedFieldNumber = 3;
    private bool attached_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Attached {
      get { return attached_; }
      set {
        attached_ = value;
      }
    }

    /// <summary>Field number for the "compare_and_set_cleaners" field.</summary>
    public const int CompareAndSetCleanersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cheetah.Matches.Relay.Editor.GRPC.CompareAndSetCleaner> _repeated_compareAndSetCleaners_codec
        = pb::FieldCodec.ForMessage(34, global::Cheetah.Matches.Relay.Editor.GRPC.CompareAndSetCleaner.Parser);
    private readonly pbc::RepeatedField<global::Cheetah.Matches.Relay.Editor.GRPC.CompareAndSetCleaner> compareAndSetCleaners_ = new pbc::RepeatedField<global::Cheetah.Matches.Relay.Editor.GRPC.CompareAndSetCleaner>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cheetah.Matches.Relay.Editor.GRPC.CompareAndSetCleaner> CompareAndSetCleaners {
      get { return compareAndSetCleaners_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DumpUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DumpUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Groups != other.Groups) return false;
      if (Attached != other.Attached) return false;
      if(!compareAndSetCleaners_.Equals(other.compareAndSetCleaners_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Groups != 0UL) hash ^= Groups.GetHashCode();
      if (Attached != false) hash ^= Attached.GetHashCode();
      hash ^= compareAndSetCleaners_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Groups != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Groups);
      }
      if (Attached != false) {
        output.WriteRawTag(24);
        output.WriteBool(Attached);
      }
      compareAndSetCleaners_.WriteTo(output, _repeated_compareAndSetCleaners_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Groups != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Groups);
      }
      if (Attached != false) {
        size += 1 + 1;
      }
      size += compareAndSetCleaners_.CalculateSize(_repeated_compareAndSetCleaners_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DumpUser other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Groups != 0UL) {
        Groups = other.Groups;
      }
      if (other.Attached != false) {
        Attached = other.Attached;
      }
      compareAndSetCleaners_.Add(other.compareAndSetCleaners_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Groups = input.ReadUInt64();
            break;
          }
          case 24: {
            Attached = input.ReadBool();
            break;
          }
          case 34: {
            compareAndSetCleaners_.AddEntriesFrom(input, _repeated_compareAndSetCleaners_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CompareAndSetCleaner : pb::IMessage<CompareAndSetCleaner> {
    private static readonly pb::MessageParser<CompareAndSetCleaner> _parser = new pb::MessageParser<CompareAndSetCleaner>(() => new CompareAndSetCleaner());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompareAndSetCleaner> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Relay.Editor.GRPC.MatchesRelayAdminReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompareAndSetCleaner() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompareAndSetCleaner(CompareAndSetCleaner other) : this() {
      gameObjectId_ = other.gameObjectId_;
      gameObjectOwnerUser_ = other.gameObjectOwnerUser_;
      fieldId_ = other.fieldId_;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompareAndSetCleaner Clone() {
      return new CompareAndSetCleaner(this);
    }

    /// <summary>Field number for the "game_object_id" field.</summary>
    public const int GameObjectIdFieldNumber = 1;
    private uint gameObjectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameObjectId {
      get { return gameObjectId_; }
      set {
        gameObjectId_ = value;
      }
    }

    /// <summary>Field number for the "game_object_owner_user" field.</summary>
    public const int GameObjectOwnerUserFieldNumber = 2;
    private uint gameObjectOwnerUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameObjectOwnerUser {
      get { return gameObjectOwnerUser_; }
      set {
        gameObjectOwnerUser_ = value;
      }
    }

    /// <summary>Field number for the "field_id" field.</summary>
    public const int FieldIdFieldNumber = 3;
    private uint fieldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FieldId {
      get { return fieldId_; }
      set {
        fieldId_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private global::Cheetah.Matches.Relay.Shared.GRPC.FieldValue value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cheetah.Matches.Relay.Shared.GRPC.FieldValue Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompareAndSetCleaner);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompareAndSetCleaner other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameObjectId != other.GameObjectId) return false;
      if (GameObjectOwnerUser != other.GameObjectOwnerUser) return false;
      if (FieldId != other.FieldId) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameObjectId != 0) hash ^= GameObjectId.GetHashCode();
      if (GameObjectOwnerUser != 0) hash ^= GameObjectOwnerUser.GetHashCode();
      if (FieldId != 0) hash ^= FieldId.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameObjectId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameObjectId);
      }
      if (GameObjectOwnerUser != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameObjectOwnerUser);
      }
      if (FieldId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FieldId);
      }
      if (value_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameObjectId);
      }
      if (GameObjectOwnerUser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameObjectOwnerUser);
      }
      if (FieldId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FieldId);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompareAndSetCleaner other) {
      if (other == null) {
        return;
      }
      if (other.GameObjectId != 0) {
        GameObjectId = other.GameObjectId;
      }
      if (other.GameObjectOwnerUser != 0) {
        GameObjectOwnerUser = other.GameObjectOwnerUser;
      }
      if (other.FieldId != 0) {
        FieldId = other.FieldId;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::Cheetah.Matches.Relay.Shared.GRPC.FieldValue();
        }
        Value.MergeFrom(other.Value);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameObjectId = input.ReadUInt32();
            break;
          }
          case 16: {
            GameObjectOwnerUser = input.ReadUInt32();
            break;
          }
          case 24: {
            FieldId = input.ReadUInt32();
            break;
          }
          case 34: {
            if (value_ == null) {
              Value = new global::Cheetah.Matches.Relay.Shared.GRPC.FieldValue();
            }
            input.ReadMessage(Value);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DumpObject : pb::IMessage<DumpObject> {
    private static readonly pb::MessageParser<DumpObject> _parser = new pb::MessageParser<DumpObject>(() => new DumpObject());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DumpObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Relay.Editor.GRPC.MatchesRelayAdminReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpObject(DumpObject other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      groups_ = other.groups_;
      template_ = other.template_;
      created_ = other.created_;
      ownerUserId_ = other.ownerUserId_;
      fields_ = other.fields_.Clone();
      compareAndSetOwners_ = other.compareAndSetOwners_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpObject Clone() {
      return new DumpObject(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 2;
    private ulong groups_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Groups {
      get { return groups_; }
      set {
        groups_ = value;
      }
    }

    /// <summary>Field number for the "template" field.</summary>
    public const int TemplateFieldNumber = 3;
    private uint template_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Template {
      get { return template_; }
      set {
        template_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 4;
    private bool created_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "owner_user_id" field.</summary>
    public const int OwnerUserIdFieldNumber = 5;
    private uint ownerUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OwnerUserId {
      get { if ((_hasBits0 & 1) != 0) { return ownerUserId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        ownerUserId_ = value;
      }
    }
    /// <summary>Gets whether the "owner_user_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwnerUserId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "owner_user_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwnerUserId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Cheetah.Matches.Relay.Shared.GRPC.GameObjectField> _repeated_fields_codec
        = pb::FieldCodec.ForMessage(50, global::Cheetah.Matches.Relay.Shared.GRPC.GameObjectField.Parser);
    private readonly pbc::RepeatedField<global::Cheetah.Matches.Relay.Shared.GRPC.GameObjectField> fields_ = new pbc::RepeatedField<global::Cheetah.Matches.Relay.Shared.GRPC.GameObjectField>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cheetah.Matches.Relay.Shared.GRPC.GameObjectField> Fields {
      get { return fields_; }
    }

    /// <summary>Field number for the "compare_and_set_owners" field.</summary>
    public const int CompareAndSetOwnersFieldNumber = 9;
    private static readonly pbc::MapField<uint, long>.Codec _map_compareAndSetOwners_codec
        = new pbc::MapField<uint, long>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForInt64(16, 0L), 74);
    private readonly pbc::MapField<uint, long> compareAndSetOwners_ = new pbc::MapField<uint, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, long> CompareAndSetOwners {
      get { return compareAndSetOwners_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DumpObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DumpObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Groups != other.Groups) return false;
      if (Template != other.Template) return false;
      if (Created != other.Created) return false;
      if (OwnerUserId != other.OwnerUserId) return false;
      if(!fields_.Equals(other.fields_)) return false;
      if (!CompareAndSetOwners.Equals(other.CompareAndSetOwners)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Groups != 0UL) hash ^= Groups.GetHashCode();
      if (Template != 0) hash ^= Template.GetHashCode();
      if (Created != false) hash ^= Created.GetHashCode();
      if (HasOwnerUserId) hash ^= OwnerUserId.GetHashCode();
      hash ^= fields_.GetHashCode();
      hash ^= CompareAndSetOwners.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Groups != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Groups);
      }
      if (Template != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Template);
      }
      if (Created != false) {
        output.WriteRawTag(32);
        output.WriteBool(Created);
      }
      if (HasOwnerUserId) {
        output.WriteRawTag(40);
        output.WriteUInt32(OwnerUserId);
      }
      fields_.WriteTo(output, _repeated_fields_codec);
      compareAndSetOwners_.WriteTo(output, _map_compareAndSetOwners_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Groups != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Groups);
      }
      if (Template != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Template);
      }
      if (Created != false) {
        size += 1 + 1;
      }
      if (HasOwnerUserId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerUserId);
      }
      size += fields_.CalculateSize(_repeated_fields_codec);
      size += compareAndSetOwners_.CalculateSize(_map_compareAndSetOwners_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DumpObject other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Groups != 0UL) {
        Groups = other.Groups;
      }
      if (other.Template != 0) {
        Template = other.Template;
      }
      if (other.Created != false) {
        Created = other.Created;
      }
      if (other.HasOwnerUserId) {
        OwnerUserId = other.OwnerUserId;
      }
      fields_.Add(other.fields_);
      compareAndSetOwners_.Add(other.compareAndSetOwners_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Groups = input.ReadUInt64();
            break;
          }
          case 24: {
            Template = input.ReadUInt32();
            break;
          }
          case 32: {
            Created = input.ReadBool();
            break;
          }
          case 40: {
            OwnerUserId = input.ReadUInt32();
            break;
          }
          case 50: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
          case 74: {
            compareAndSetOwners_.AddEntriesFrom(input, _map_compareAndSetOwners_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateSessionRequest : pb::IMessage<CreateSessionRequest> {
    private static readonly pb::MessageParser<CreateSessionRequest> _parser = new pb::MessageParser<CreateSessionRequest>(() => new CreateSessionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateSessionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Relay.Editor.GRPC.MatchesRelayAdminReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSessionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSessionRequest(CreateSessionRequest other) : this() {
      room_ = other.room_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSessionRequest Clone() {
      return new CreateSessionRequest(this);
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 1;
    private ulong room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateSessionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateSessionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Room != other.Room) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Room != 0UL) hash ^= Room.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Room != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Room);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Room != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Room);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateSessionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Room != 0UL) {
        Room = other.Room;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Room = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateSessionResponse : pb::IMessage<CreateSessionResponse> {
    private static readonly pb::MessageParser<CreateSessionResponse> _parser = new pb::MessageParser<CreateSessionResponse>(() => new CreateSessionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateSessionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Relay.Editor.GRPC.MatchesRelayAdminReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSessionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSessionResponse(CreateSessionResponse other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSessionResponse Clone() {
      return new CreateSessionResponse(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateSessionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateSessionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateSessionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetFilterRequest : pb::IMessage<SetFilterRequest> {
    private static readonly pb::MessageParser<SetFilterRequest> _parser = new pb::MessageParser<SetFilterRequest>(() => new SetFilterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetFilterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Relay.Editor.GRPC.MatchesRelayAdminReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFilterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFilterRequest(SetFilterRequest other) : this() {
      room_ = other.room_;
      session_ = other.session_;
      filter_ = other.filter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFilterRequest Clone() {
      return new SetFilterRequest(this);
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 1;
    private ulong room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 2;
    private uint session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 3;
    private string filter_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetFilterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetFilterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Room != other.Room) return false;
      if (Session != other.Session) return false;
      if (Filter != other.Filter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Room != 0UL) hash ^= Room.GetHashCode();
      if (Session != 0) hash ^= Session.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Room != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Room);
      }
      if (Session != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Session);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Filter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Room != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Room);
      }
      if (Session != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Session);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetFilterRequest other) {
      if (other == null) {
        return;
      }
      if (other.Room != 0UL) {
        Room = other.Room;
      }
      if (other.Session != 0) {
        Session = other.Session;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Room = input.ReadUInt64();
            break;
          }
          case 16: {
            Session = input.ReadUInt32();
            break;
          }
          case 26: {
            Filter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetFilterResponse : pb::IMessage<SetFilterResponse> {
    private static readonly pb::MessageParser<SetFilterResponse> _parser = new pb::MessageParser<SetFilterResponse>(() => new SetFilterResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetFilterResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Relay.Editor.GRPC.MatchesRelayAdminReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFilterResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFilterResponse(SetFilterResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFilterResponse Clone() {
      return new SetFilterResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetFilterResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetFilterResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetFilterResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetCommandsRequest : pb::IMessage<GetCommandsRequest> {
    private static readonly pb::MessageParser<GetCommandsRequest> _parser = new pb::MessageParser<GetCommandsRequest>(() => new GetCommandsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCommandsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Relay.Editor.GRPC.MatchesRelayAdminReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCommandsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCommandsRequest(GetCommandsRequest other) : this() {
      room_ = other.room_;
      session_ = other.session_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCommandsRequest Clone() {
      return new GetCommandsRequest(this);
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 1;
    private ulong room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 2;
    private uint session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCommandsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCommandsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Room != other.Room) return false;
      if (Session != other.Session) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Room != 0UL) hash ^= Room.GetHashCode();
      if (Session != 0) hash ^= Session.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Room != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Room);
      }
      if (Session != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Session);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Room != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Room);
      }
      if (Session != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Session);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCommandsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Room != 0UL) {
        Room = other.Room;
      }
      if (other.Session != 0) {
        Session = other.Session;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Room = input.ReadUInt64();
            break;
          }
          case 16: {
            Session = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetCommandsResponse : pb::IMessage<GetCommandsResponse> {
    private static readonly pb::MessageParser<GetCommandsResponse> _parser = new pb::MessageParser<GetCommandsResponse>(() => new GetCommandsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCommandsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Relay.Editor.GRPC.MatchesRelayAdminReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCommandsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCommandsResponse(GetCommandsResponse other) : this() {
      commands_ = other.commands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCommandsResponse Clone() {
      return new GetCommandsResponse(this);
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cheetah.Matches.Relay.Editor.GRPC.Command> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(10, global::Cheetah.Matches.Relay.Editor.GRPC.Command.Parser);
    private readonly pbc::RepeatedField<global::Cheetah.Matches.Relay.Editor.GRPC.Command> commands_ = new pbc::RepeatedField<global::Cheetah.Matches.Relay.Editor.GRPC.Command>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cheetah.Matches.Relay.Editor.GRPC.Command> Commands {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCommandsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCommandsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commands_.Equals(other.commands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commands_.WriteTo(output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commands_.CalculateSize(_repeated_commands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCommandsResponse other) {
      if (other == null) {
        return;
      }
      commands_.Add(other.commands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Command : pb::IMessage<Command> {
    private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Command> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Relay.Editor.GRPC.MatchesRelayAdminReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command(Command other) : this() {
      _hasBits0 = other._hasBits0;
      time_ = other.time_;
      direction_ = other.direction_;
      command_ = other.command_;
      objectId_ = other.objectId_;
      userId_ = other.userId_;
      template_ = other.template_;
      fieldId_ = other.fieldId_;
      fieldType_ = other.fieldType_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command Clone() {
      return new Command(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private double time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 2;
    private string direction_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Direction {
      get { return direction_; }
      set {
        direction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int Command_FieldNumber = 3;
    private string command_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Command_ {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 4;
    private string objectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObjectId {
      get { return objectId_; }
      set {
        objectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 5;
    private uint userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "template" field.</summary>
    public const int TemplateFieldNumber = 6;
    private uint template_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Template {
      get { if ((_hasBits0 & 1) != 0) { return template_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        template_ = value;
      }
    }
    /// <summary>Gets whether the "template" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTemplate {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "template" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTemplate() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "field_id" field.</summary>
    public const int FieldIdFieldNumber = 7;
    private uint fieldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FieldId {
      get { if ((_hasBits0 & 2) != 0) { return fieldId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        fieldId_ = value;
      }
    }
    /// <summary>Gets whether the "field_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFieldId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "field_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFieldId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "field_type" field.</summary>
    public const int FieldTypeFieldNumber = 8;
    private global::Cheetah.Matches.Relay.Shared.GRPC.FieldType fieldType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cheetah.Matches.Relay.Shared.GRPC.FieldType FieldType {
      get { if ((_hasBits0 & 4) != 0) { return fieldType_; } else { return global::Cheetah.Matches.Relay.Shared.GRPC.FieldType.Long; } }
      set {
        _hasBits0 |= 4;
        fieldType_ = value;
      }
    }
    /// <summary>Gets whether the "field_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFieldType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "field_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFieldType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 9;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Command);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Time, other.Time)) return false;
      if (Direction != other.Direction) return false;
      if (Command_ != other.Command_) return false;
      if (ObjectId != other.ObjectId) return false;
      if (UserId != other.UserId) return false;
      if (Template != other.Template) return false;
      if (FieldId != other.FieldId) return false;
      if (FieldType != other.FieldType) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Time);
      if (Direction.Length != 0) hash ^= Direction.GetHashCode();
      if (Command_.Length != 0) hash ^= Command_.GetHashCode();
      if (ObjectId.Length != 0) hash ^= ObjectId.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (HasTemplate) hash ^= Template.GetHashCode();
      if (HasFieldId) hash ^= FieldId.GetHashCode();
      if (HasFieldType) hash ^= FieldType.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Time);
      }
      if (Direction.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Direction);
      }
      if (Command_.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Command_);
      }
      if (ObjectId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ObjectId);
      }
      if (UserId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(UserId);
      }
      if (HasTemplate) {
        output.WriteRawTag(48);
        output.WriteUInt32(Template);
      }
      if (HasFieldId) {
        output.WriteRawTag(56);
        output.WriteUInt32(FieldId);
      }
      if (HasFieldType) {
        output.WriteRawTag(64);
        output.WriteEnum((int) FieldType);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0D) {
        size += 1 + 8;
      }
      if (Direction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Direction);
      }
      if (Command_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Command_);
      }
      if (ObjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectId);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (HasTemplate) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Template);
      }
      if (HasFieldId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FieldId);
      }
      if (HasFieldType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FieldType);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Command other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0D) {
        Time = other.Time;
      }
      if (other.Direction.Length != 0) {
        Direction = other.Direction;
      }
      if (other.Command_.Length != 0) {
        Command_ = other.Command_;
      }
      if (other.ObjectId.Length != 0) {
        ObjectId = other.ObjectId;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.HasTemplate) {
        Template = other.Template;
      }
      if (other.HasFieldId) {
        FieldId = other.FieldId;
      }
      if (other.HasFieldType) {
        FieldType = other.FieldType;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Time = input.ReadDouble();
            break;
          }
          case 18: {
            Direction = input.ReadString();
            break;
          }
          case 26: {
            Command_ = input.ReadString();
            break;
          }
          case 34: {
            ObjectId = input.ReadString();
            break;
          }
          case 40: {
            UserId = input.ReadUInt32();
            break;
          }
          case 48: {
            Template = input.ReadUInt32();
            break;
          }
          case 56: {
            FieldId = input.ReadUInt32();
            break;
          }
          case 64: {
            FieldType = (global::Cheetah.Matches.Relay.Shared.GRPC.FieldType) input.ReadEnum();
            break;
          }
          case 74: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloseSessionRequest : pb::IMessage<CloseSessionRequest> {
    private static readonly pb::MessageParser<CloseSessionRequest> _parser = new pb::MessageParser<CloseSessionRequest>(() => new CloseSessionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseSessionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Relay.Editor.GRPC.MatchesRelayAdminReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseSessionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseSessionRequest(CloseSessionRequest other) : this() {
      room_ = other.room_;
      session_ = other.session_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseSessionRequest Clone() {
      return new CloseSessionRequest(this);
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 1;
    private ulong room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 2;
    private uint session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseSessionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseSessionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Room != other.Room) return false;
      if (Session != other.Session) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Room != 0UL) hash ^= Room.GetHashCode();
      if (Session != 0) hash ^= Session.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Room != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Room);
      }
      if (Session != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Session);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Room != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Room);
      }
      if (Session != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Session);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseSessionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Room != 0UL) {
        Room = other.Room;
      }
      if (other.Session != 0) {
        Session = other.Session;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Room = input.ReadUInt64();
            break;
          }
          case 16: {
            Session = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloseSessionResponse : pb::IMessage<CloseSessionResponse> {
    private static readonly pb::MessageParser<CloseSessionResponse> _parser = new pb::MessageParser<CloseSessionResponse>(() => new CloseSessionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseSessionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Relay.Editor.GRPC.MatchesRelayAdminReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseSessionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseSessionResponse(CloseSessionResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseSessionResponse Clone() {
      return new CloseSessionResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseSessionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseSessionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseSessionResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
