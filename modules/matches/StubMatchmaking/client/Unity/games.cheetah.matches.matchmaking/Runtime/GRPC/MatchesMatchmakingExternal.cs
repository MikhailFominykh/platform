// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: matches.matchmaking.external.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cheetah.Matches.Matchmaking.GRPC {

  /// <summary>Holder for reflection information generated from matches.matchmaking.external.proto</summary>
  public static partial class MatchesMatchmakingExternalReflection {

    #region Descriptor
    /// <summary>File descriptor for matches.matchmaking.external.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MatchesMatchmakingExternalReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJtYXRjaGVzLm1hdGNobWFraW5nLmV4dGVybmFsLnByb3RvEiRjaGVldGFo",
            "Lm1hdGNoZXMubWF0Y2htYWtpbmcuZXh0ZXJuYWwiPAoNVGlja2V0UmVxdWVz",
            "dBITCgt1c2VyX2dyb3VwcxgBIAEoBBIWCg5tYXRjaF90ZW1wbGF0ZRgCIAEo",
            "CSJ5Cg5UaWNrZXRSZXNwb25zZRITCgtwcml2YXRlX2tleRgBIAEoDBIPCgd1",
            "c2VyX2lkGAIgASgNEg8KB3Jvb21faWQYAyABKAQSFwoPcmVsYXlfZ2FtZV9o",
            "b3N0GAQgASgJEhcKD3JlbGF5X2dhbWVfcG9ydBgFIAEoDTKHAQoLTWF0Y2ht",
            "YWtpbmcSeAoLTWF0Y2htYWtpbmcSMy5jaGVldGFoLm1hdGNoZXMubWF0Y2ht",
            "YWtpbmcuZXh0ZXJuYWwuVGlja2V0UmVxdWVzdBo0LmNoZWV0YWgubWF0Y2hl",
            "cy5tYXRjaG1ha2luZy5leHRlcm5hbC5UaWNrZXRSZXNwb25zZUIjqgIgQ2hl",
            "ZXRhaC5NYXRjaGVzLk1hdGNobWFraW5nLkdSUENiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Matchmaking.GRPC.TicketRequest), global::Cheetah.Matches.Matchmaking.GRPC.TicketRequest.Parser, new[]{ "UserGroups", "MatchTemplate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cheetah.Matches.Matchmaking.GRPC.TicketResponse), global::Cheetah.Matches.Matchmaking.GRPC.TicketResponse.Parser, new[]{ "PrivateKey", "UserId", "RoomId", "RelayGameHost", "RelayGamePort" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TicketRequest : pb::IMessage<TicketRequest> {
    private static readonly pb::MessageParser<TicketRequest> _parser = new pb::MessageParser<TicketRequest>(() => new TicketRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Matchmaking.GRPC.MatchesMatchmakingExternalReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketRequest(TicketRequest other) : this() {
      userGroups_ = other.userGroups_;
      matchTemplate_ = other.matchTemplate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketRequest Clone() {
      return new TicketRequest(this);
    }

    /// <summary>Field number for the "user_groups" field.</summary>
    public const int UserGroupsFieldNumber = 1;
    private ulong userGroups_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserGroups {
      get { return userGroups_; }
      set {
        userGroups_ = value;
      }
    }

    /// <summary>Field number for the "match_template" field.</summary>
    public const int MatchTemplateFieldNumber = 2;
    private string matchTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchTemplate {
      get { return matchTemplate_; }
      set {
        matchTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserGroups != other.UserGroups) return false;
      if (MatchTemplate != other.MatchTemplate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserGroups != 0UL) hash ^= UserGroups.GetHashCode();
      if (MatchTemplate.Length != 0) hash ^= MatchTemplate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserGroups != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserGroups);
      }
      if (MatchTemplate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MatchTemplate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserGroups != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserGroups);
      }
      if (MatchTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchTemplate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserGroups != 0UL) {
        UserGroups = other.UserGroups;
      }
      if (other.MatchTemplate.Length != 0) {
        MatchTemplate = other.MatchTemplate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserGroups = input.ReadUInt64();
            break;
          }
          case 18: {
            MatchTemplate = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TicketResponse : pb::IMessage<TicketResponse> {
    private static readonly pb::MessageParser<TicketResponse> _parser = new pb::MessageParser<TicketResponse>(() => new TicketResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cheetah.Matches.Matchmaking.GRPC.MatchesMatchmakingExternalReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketResponse(TicketResponse other) : this() {
      privateKey_ = other.privateKey_;
      userId_ = other.userId_;
      roomId_ = other.roomId_;
      relayGameHost_ = other.relayGameHost_;
      relayGamePort_ = other.relayGamePort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketResponse Clone() {
      return new TicketResponse(this);
    }

    /// <summary>Field number for the "private_key" field.</summary>
    public const int PrivateKeyFieldNumber = 1;
    private pb::ByteString privateKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrivateKey {
      get { return privateKey_; }
      set {
        privateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private uint userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 3;
    private ulong roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "relay_game_host" field.</summary>
    public const int RelayGameHostFieldNumber = 4;
    private string relayGameHost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RelayGameHost {
      get { return relayGameHost_; }
      set {
        relayGameHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "relay_game_port" field.</summary>
    public const int RelayGamePortFieldNumber = 5;
    private uint relayGamePort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RelayGamePort {
      get { return relayGamePort_; }
      set {
        relayGamePort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrivateKey != other.PrivateKey) return false;
      if (UserId != other.UserId) return false;
      if (RoomId != other.RoomId) return false;
      if (RelayGameHost != other.RelayGameHost) return false;
      if (RelayGamePort != other.RelayGamePort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrivateKey.Length != 0) hash ^= PrivateKey.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (RoomId != 0UL) hash ^= RoomId.GetHashCode();
      if (RelayGameHost.Length != 0) hash ^= RelayGameHost.GetHashCode();
      if (RelayGamePort != 0) hash ^= RelayGamePort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PrivateKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PrivateKey);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserId);
      }
      if (RoomId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoomId);
      }
      if (RelayGameHost.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RelayGameHost);
      }
      if (RelayGamePort != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RelayGamePort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivateKey);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (RoomId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomId);
      }
      if (RelayGameHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RelayGameHost);
      }
      if (RelayGamePort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RelayGamePort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketResponse other) {
      if (other == null) {
        return;
      }
      if (other.PrivateKey.Length != 0) {
        PrivateKey = other.PrivateKey;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.RoomId != 0UL) {
        RoomId = other.RoomId;
      }
      if (other.RelayGameHost.Length != 0) {
        RelayGameHost = other.RelayGameHost;
      }
      if (other.RelayGamePort != 0) {
        RelayGamePort = other.RelayGamePort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PrivateKey = input.ReadBytes();
            break;
          }
          case 16: {
            UserId = input.ReadUInt32();
            break;
          }
          case 24: {
            RoomId = input.ReadUInt64();
            break;
          }
          case 34: {
            RelayGameHost = input.ReadString();
            break;
          }
          case 40: {
            RelayGamePort = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
