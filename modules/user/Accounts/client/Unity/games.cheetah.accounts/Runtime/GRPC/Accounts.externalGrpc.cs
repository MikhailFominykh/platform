// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: accounts.external.proto
// </auto-generated>
// Original file comments:
// API для обновления токенов - используется игровыми клиентами
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Cheetah.Accounts.GRPC {
  public static partial class Tokens
  {
    static readonly string __ServiceName = "cheetah.accounts.external.Tokens";

    static readonly grpc::Marshaller<global::Cheetah.Accounts.GRPC.RefreshTokenRequest> __Marshaller_cheetah_accounts_external_RefreshTokenRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cheetah.Accounts.GRPC.RefreshTokenRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Cheetah.Accounts.GRPC.SessionAndRefreshTokens> __Marshaller_cheetah_accounts_external_SessionAndRefreshTokens = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cheetah.Accounts.GRPC.SessionAndRefreshTokens.Parser.ParseFrom);

    static readonly grpc::Method<global::Cheetah.Accounts.GRPC.RefreshTokenRequest, global::Cheetah.Accounts.GRPC.SessionAndRefreshTokens> __Method_refresh = new grpc::Method<global::Cheetah.Accounts.GRPC.RefreshTokenRequest, global::Cheetah.Accounts.GRPC.SessionAndRefreshTokens>(
        grpc::MethodType.Unary,
        __ServiceName,
        "refresh",
        __Marshaller_cheetah_accounts_external_RefreshTokenRequest,
        __Marshaller_cheetah_accounts_external_SessionAndRefreshTokens);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Cheetah.Accounts.GRPC.AccountsExternalReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Tokens</summary>
    [grpc::BindServiceMethod(typeof(Tokens), "BindService")]
    public abstract partial class TokensBase
    {
      /// <summary>
      ///
      ///Обновить токены
      ///- после обновления refresh токен становиться не валидным
      ///- refresh токен связан с device_id
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Cheetah.Accounts.GRPC.SessionAndRefreshTokens> refresh(global::Cheetah.Accounts.GRPC.RefreshTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Tokens</summary>
    public partial class TokensClient : grpc::ClientBase<TokensClient>
    {
      /// <summary>Creates a new client for Tokens</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TokensClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Tokens that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TokensClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TokensClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TokensClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///
      ///Обновить токены
      ///- после обновления refresh токен становиться не валидным
      ///- refresh токен связан с device_id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Cheetah.Accounts.GRPC.SessionAndRefreshTokens refresh(global::Cheetah.Accounts.GRPC.RefreshTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return refresh(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///Обновить токены
      ///- после обновления refresh токен становиться не валидным
      ///- refresh токен связан с device_id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Cheetah.Accounts.GRPC.SessionAndRefreshTokens refresh(global::Cheetah.Accounts.GRPC.RefreshTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_refresh, null, options, request);
      }
      /// <summary>
      ///
      ///Обновить токены
      ///- после обновления refresh токен становиться не валидным
      ///- refresh токен связан с device_id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Accounts.GRPC.SessionAndRefreshTokens> refreshAsync(global::Cheetah.Accounts.GRPC.RefreshTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return refreshAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///Обновить токены
      ///- после обновления refresh токен становиться не валидным
      ///- refresh токен связан с device_id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Accounts.GRPC.SessionAndRefreshTokens> refreshAsync(global::Cheetah.Accounts.GRPC.RefreshTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_refresh, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TokensClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TokensClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TokensBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_refresh, serviceImpl.refresh).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TokensBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_refresh, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cheetah.Accounts.GRPC.RefreshTokenRequest, global::Cheetah.Accounts.GRPC.SessionAndRefreshTokens>(serviceImpl.refresh));
    }

  }
  public static partial class Cookie
  {
    static readonly string __ServiceName = "cheetah.accounts.external.Cookie";

    static readonly grpc::Marshaller<global::Cheetah.Accounts.GRPC.RegistryRequest> __Marshaller_cheetah_accounts_external_RegistryRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cheetah.Accounts.GRPC.RegistryRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Cheetah.Accounts.GRPC.RegistryResponse> __Marshaller_cheetah_accounts_external_RegistryResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cheetah.Accounts.GRPC.RegistryResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Cheetah.Accounts.GRPC.LoginRequest> __Marshaller_cheetah_accounts_external_LoginRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cheetah.Accounts.GRPC.LoginRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Cheetah.Accounts.GRPC.LoginResponse> __Marshaller_cheetah_accounts_external_LoginResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cheetah.Accounts.GRPC.LoginResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Cheetah.Accounts.GRPC.RegistryRequest, global::Cheetah.Accounts.GRPC.RegistryResponse> __Method_Register = new grpc::Method<global::Cheetah.Accounts.GRPC.RegistryRequest, global::Cheetah.Accounts.GRPC.RegistryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Register",
        __Marshaller_cheetah_accounts_external_RegistryRequest,
        __Marshaller_cheetah_accounts_external_RegistryResponse);

    static readonly grpc::Method<global::Cheetah.Accounts.GRPC.LoginRequest, global::Cheetah.Accounts.GRPC.LoginResponse> __Method_Login = new grpc::Method<global::Cheetah.Accounts.GRPC.LoginRequest, global::Cheetah.Accounts.GRPC.LoginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_cheetah_accounts_external_LoginRequest,
        __Marshaller_cheetah_accounts_external_LoginResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Cheetah.Accounts.GRPC.AccountsExternalReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Cookie</summary>
    [grpc::BindServiceMethod(typeof(Cookie), "BindService")]
    public abstract partial class CookieBase
    {
      /// <summary>
      ///
      ///Регистрация пользователя по cookie
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Cheetah.Accounts.GRPC.RegistryResponse> Register(global::Cheetah.Accounts.GRPC.RegistryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      ///Вход пользователя по cookie
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Cheetah.Accounts.GRPC.LoginResponse> Login(global::Cheetah.Accounts.GRPC.LoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Cookie</summary>
    public partial class CookieClient : grpc::ClientBase<CookieClient>
    {
      /// <summary>Creates a new client for Cookie</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CookieClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Cookie that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CookieClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CookieClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CookieClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///
      ///Регистрация пользователя по cookie
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Cheetah.Accounts.GRPC.RegistryResponse Register(global::Cheetah.Accounts.GRPC.RegistryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Register(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///Регистрация пользователя по cookie
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Cheetah.Accounts.GRPC.RegistryResponse Register(global::Cheetah.Accounts.GRPC.RegistryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Register, null, options, request);
      }
      /// <summary>
      ///
      ///Регистрация пользователя по cookie
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Accounts.GRPC.RegistryResponse> RegisterAsync(global::Cheetah.Accounts.GRPC.RegistryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///Регистрация пользователя по cookie
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Accounts.GRPC.RegistryResponse> RegisterAsync(global::Cheetah.Accounts.GRPC.RegistryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Register, null, options, request);
      }
      /// <summary>
      ///
      ///Вход пользователя по cookie
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Cheetah.Accounts.GRPC.LoginResponse Login(global::Cheetah.Accounts.GRPC.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///Вход пользователя по cookie
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Cheetah.Accounts.GRPC.LoginResponse Login(global::Cheetah.Accounts.GRPC.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Login, null, options, request);
      }
      /// <summary>
      ///
      ///Вход пользователя по cookie
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Accounts.GRPC.LoginResponse> LoginAsync(global::Cheetah.Accounts.GRPC.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///Вход пользователя по cookie
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Accounts.GRPC.LoginResponse> LoginAsync(global::Cheetah.Accounts.GRPC.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Login, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CookieClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CookieClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CookieBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Register, serviceImpl.Register)
          .AddMethod(__Method_Login, serviceImpl.Login).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CookieBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Register, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cheetah.Accounts.GRPC.RegistryRequest, global::Cheetah.Accounts.GRPC.RegistryResponse>(serviceImpl.Register));
      serviceBinder.AddMethod(__Method_Login, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cheetah.Accounts.GRPC.LoginRequest, global::Cheetah.Accounts.GRPC.LoginResponse>(serviceImpl.Login));
    }

  }
  public static partial class Google
  {
    static readonly string __ServiceName = "cheetah.accounts.external.Google";

    static readonly grpc::Marshaller<global::Cheetah.Accounts.GRPC.RegisterOrLoginRequest> __Marshaller_cheetah_accounts_external_RegisterOrLoginRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cheetah.Accounts.GRPC.RegisterOrLoginRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Cheetah.Accounts.GRPC.RegisterOrLoginResponse> __Marshaller_cheetah_accounts_external_RegisterOrLoginResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cheetah.Accounts.GRPC.RegisterOrLoginResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Cheetah.Accounts.GRPC.AttachRequest> __Marshaller_cheetah_accounts_external_AttachRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cheetah.Accounts.GRPC.AttachRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Cheetah.Accounts.GRPC.AttachResponse> __Marshaller_cheetah_accounts_external_AttachResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cheetah.Accounts.GRPC.AttachResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Cheetah.Accounts.GRPC.RegisterOrLoginRequest, global::Cheetah.Accounts.GRPC.RegisterOrLoginResponse> __Method_RegisterOrLogin = new grpc::Method<global::Cheetah.Accounts.GRPC.RegisterOrLoginRequest, global::Cheetah.Accounts.GRPC.RegisterOrLoginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterOrLogin",
        __Marshaller_cheetah_accounts_external_RegisterOrLoginRequest,
        __Marshaller_cheetah_accounts_external_RegisterOrLoginResponse);

    static readonly grpc::Method<global::Cheetah.Accounts.GRPC.AttachRequest, global::Cheetah.Accounts.GRPC.AttachResponse> __Method_Attach = new grpc::Method<global::Cheetah.Accounts.GRPC.AttachRequest, global::Cheetah.Accounts.GRPC.AttachResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Attach",
        __Marshaller_cheetah_accounts_external_AttachRequest,
        __Marshaller_cheetah_accounts_external_AttachResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Cheetah.Accounts.GRPC.AccountsExternalReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of Google</summary>
    [grpc::BindServiceMethod(typeof(Google), "BindService")]
    public abstract partial class GoogleBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Cheetah.Accounts.GRPC.RegisterOrLoginResponse> RegisterOrLogin(global::Cheetah.Accounts.GRPC.RegisterOrLoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Cheetah.Accounts.GRPC.AttachResponse> Attach(global::Cheetah.Accounts.GRPC.AttachRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Google</summary>
    public partial class GoogleClient : grpc::ClientBase<GoogleClient>
    {
      /// <summary>Creates a new client for Google</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GoogleClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Google that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GoogleClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GoogleClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GoogleClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Cheetah.Accounts.GRPC.RegisterOrLoginResponse RegisterOrLogin(global::Cheetah.Accounts.GRPC.RegisterOrLoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterOrLogin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Cheetah.Accounts.GRPC.RegisterOrLoginResponse RegisterOrLogin(global::Cheetah.Accounts.GRPC.RegisterOrLoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterOrLogin, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Accounts.GRPC.RegisterOrLoginResponse> RegisterOrLoginAsync(global::Cheetah.Accounts.GRPC.RegisterOrLoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterOrLoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Accounts.GRPC.RegisterOrLoginResponse> RegisterOrLoginAsync(global::Cheetah.Accounts.GRPC.RegisterOrLoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterOrLogin, null, options, request);
      }
      public virtual global::Cheetah.Accounts.GRPC.AttachResponse Attach(global::Cheetah.Accounts.GRPC.AttachRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Attach(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Cheetah.Accounts.GRPC.AttachResponse Attach(global::Cheetah.Accounts.GRPC.AttachRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Attach, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Accounts.GRPC.AttachResponse> AttachAsync(global::Cheetah.Accounts.GRPC.AttachRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AttachAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Cheetah.Accounts.GRPC.AttachResponse> AttachAsync(global::Cheetah.Accounts.GRPC.AttachRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Attach, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GoogleClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GoogleClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GoogleBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RegisterOrLogin, serviceImpl.RegisterOrLogin)
          .AddMethod(__Method_Attach, serviceImpl.Attach).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GoogleBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RegisterOrLogin, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cheetah.Accounts.GRPC.RegisterOrLoginRequest, global::Cheetah.Accounts.GRPC.RegisterOrLoginResponse>(serviceImpl.RegisterOrLogin));
      serviceBinder.AddMethod(__Method_Attach, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cheetah.Accounts.GRPC.AttachRequest, global::Cheetah.Accounts.GRPC.AttachResponse>(serviceImpl.Attach));
    }

  }
}
#endregion
