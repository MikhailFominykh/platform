#
# Интеграционный тест
#
# 1. Собираем docker image для всех компонентов кластера
# 2. Запускаем сервер в kubernetes на digital ocean и запускаем e2e тесты из Unity
# 3. Запускам локальный сервер на docker и запускаем e2e тесты из Unity
#
name: Integration test
on:
  push:
    branches:
      - zakharovvi
      - kviring
jobs:
  integration-kuberenetes-test:
    runs-on: ubuntu-latest
    needs:
      - build-docker-images
      - build-relay-client-so
    # так как получение SSL сертификата для домена операция не быстрая
    # то тестирование для разных pull request осуществляется на одном домене
    # поэтому одновременный запуск данного action не возможен
    concurrency: ${{ github.ref }}
    # иногда что-то в хостинге может пойти не по-плану
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2.1.7
        with:
          path: |
            clients/Unity/Library
          key: integration-kuberenetes-test-${{ github.sha }}
          restore-keys: |
            integration-kuberenetes-test-
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Save DigitalOcean kubeconfig
        run: |
          doctl kubernetes cluster kubeconfig save ${{ secrets.DIGITALOCEAN_CLUSTER_ID }}
          sleep 10
      - name: Set branch name
        id: vars
        run: echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}
      - name: Prepare namespace
        run: |
          helm uninstall ${{ steps.vars.outputs.short_ref }} -n ${{ steps.vars.outputs.short_ref }} || true
          kubectl delete --namespace ${{ steps.vars.outputs.short_ref }} --all deployments,statefulsets,services,pods,pvc
      - run: sleep 20 # ждем agones
      - name: Deploy Release
        run: |
          cd hosting/charts/
          tar -czf rooms-configuration.tgz -C ../../server/matches/Factory/example/ .
          helm upgrade --debug --install ${{ steps.vars.outputs.short_ref }} \
            --namespace=${{ steps.vars.outputs.short_ref }} \
            Platform \
            -f Platform/values-dev.yaml \
            --set global.grpcDomain=${{ steps.vars.outputs.short_ref }}.cluster.dev.cheetah.games \
            --set global.platformImageVersion=${{ github.sha }} \
            --set global.roomsConfiguration=`cat rooms-configuration.tgz | openssl enc -A -base64` \
            --wait=true
          sleep 10
      - uses: actions/download-artifact@v2
        with:
          name: relay-client-so
          path: clients/Unity/Packages/games.cheetah.matches.relay/x86_64/
      - name: Configure clients/Unity/integration-test-config.json
        run: echo '{"ServerHost":"${{ steps.vars.outputs.short_ref }}.cluster.dev.cheetah.games"}' > clients/Unity/integration-test-config.json
      - uses: game-ci/unity-test-runner@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          projectPath: clients/Unity/
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          testMode: PlayMode
          useNetworkHost: true
      - name: Cleanup namespace
        # удалять namespace нельзя, так как там есть сертификаты let encrypt
        # поэтому удаляем релиз и все не нужные ресурсы
        run: |
          helm uninstall ${{ steps.vars.outputs.short_ref }} -n ${{ steps.vars.outputs.short_ref }}
          kubectl delete --namespace ${{ steps.vars.outputs.short_ref }} --all deployments,statefulsets,services,pods,pvc
  integration-docker-test:
    runs-on: ubuntu-latest
    needs:
      - build-docker-images
      - build-relay-client-so
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2.1.7
        with:
          path: |
            clients/Unity/Library
          key: integration-docker-test-${{ github.sha }}
          restore-keys: |
            integration-docker-test-    
      - name: Login to docker.registry.cheetah.games
        uses: docker/login-action@v1
        with:
          registry: docker.registry.cheetah.games
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      - uses: actions/download-artifact@v2
        with:
          name: relay-client-so
          path: clients/Unity/Packages/games.cheetah.matches.relay/x86_64/
      - name: Configure integration-test-config.json
        run: echo '{"ServerImageVersion":"${{ github.sha }}"}' > clients/Unity/integration-test-config.json
      - name: Configure cheetah-docker-registry.json
        run: echo '{"Login":"${{ secrets.DOCKER_REGISTRY_USER }}","Password":"${{ secrets.DOCKER_REGISTRY_PASSWORD}}"}' >clients/Unity/cheetah-docker-registry.json
      - uses: game-ci/unity-test-runner@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          projectPath: clients/Unity/
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          testMode: PlayMode
          useHostNetwork: true
